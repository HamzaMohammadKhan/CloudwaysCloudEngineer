The Accept-Ranges HTTP response header is a marker used by the server to advertise its support for partial requests from the client for file downloads.
This header act as a marker that is used by the server to supports the partial request of the clients.
In the presence of an Accept-Ranges header, the browser may try to resume an interrupted download instead of trying to restart the download. 
 bytes is the only range unit formally defined by RFC 7233


The Age header contains the time in seconds the object was in a proxy cache.
The Age header is usually close to zero. If it is Age: 0, it was probably fetched from the origin server; otherwise, it was usually calculated as a difference between the proxy's current date and the Date general header included in the HTTP response

Proxy caching allows a server to act as an intermediary between a user and a provider of web content. 
A proxy server is a computer system or router that functions as a relay between client and server.

The Access-Control-Allow-Origin response header indicates whether the response can be shared with from the given origin.
By origin means [scheme]://[hostname]:[port]

Web content's origin is defined by the scheme (protocol), hostname (domain), and port of the URL used to access it. Two objects have the same origin only when the scheme, hostname, and port all match.

The Content-Encoding:
	representation header lists any encodings that have been applied to the representation (message payload), and in what order.This lets the recipient know how to decode the representation in order to obtain the original payload format.
Content encoding is mainly used to compress the message data without losing information about the origin media type. Note that the original media/content type is specified in the Content-Type header, and that the Content-Encoding applies to the representation, or "coded form", of the data. 

Content-Encoding: gzip
A format using the Lempel-Ziv coding (LZ77), with a 32-bit CRC. This is the original format of the UNIX gzip program. The LZ77 Compression Algorithm is used to analyze input data and determine how to reduce the size of that input data by replacing redundant information with metadata

Content-Encoding: compress
A format using the Lempel-Ziv-Welch (LZW) algorithm. The value name was taken from the UNIX compress program, which implemented this algorithm

Content-Encoding: deflate
Using the zlib structure (defined in RFC 1950) with the deflate compression algorithm (defined in RFC 1951). 

Content-Encoding: br
A format using the Brotli algorithm

The Content-Length header indicates the size of the message body, in bytes (The length in decimal number of octets.), sent to the recipient.

The Cache-Control HTTP header field holds directives (instructions) — in both requests and responses — that control caching in browsers and shared caches (e.g. Proxies, CDNs).
The no-cache response directive indicates that the response can be stored in caches, but the response must be validated with the origin server before each reuse, even when the cache is disconnected from the origin server.

he Pragma HTTP/1.0 general header is an implementation-specific header that may have various effects along the request-response chain. This header serves for backwards compatibility with the HTTP/1.0 caches that do not have a Cache-Control HTTP/1.1 header. 


The Referrer-Policy HTTP header controls how much referrer information (sent with the Referer header) should be included with requests. Aside from the HTTP header, you can set this policy in HTML.
Referrer-Policy: no-referrer
Referrer-Policy: no-referrer-when-downgrade
Referrer-Policy: origin
Referrer-Policy: origin-when-cross-origin
Referrer-Policy: same-origin
Referrer-Policy: strict-origin

Referrer-Policy: strict-origin-when-cross-origin
Send the origin, path, and querystring when performing a same-origin request. For cross-origin requests send the origin (only) when the protocol security level stays same (HTTPS→HTTPS). Don't send the Referer header to less secure destinations (HTTPS→HTTP).

Referrer-Policy: unsafe-url

he Content-Length header indicates the size of the message body, in bytes, sent to the recipient.

"The Vary HTTP response header describes the parts of the request message aside" from the method and URL that influenced the content of the response it occurs in. Most often, this is used to create a cache key when content negotiation is in use.

An origin server is a computer that runs programs designed to listen to and respond to incoming requests or traffic.

The max-age=N response directive indicates that the response remains fresh until N seconds after the response is generated.
Cache-Control: max-age=604800
Indicates that caches can store this response and reuse it for subsequent requests while it's fresh.Note that max-age is not the elapsed time since the response was received; it is the elapsed time since the response was generated on the origin server. 

no-cache does not mean "don't cache". no-cache allows caches to store a response but requires them to revalidate it before reuse. If the sense of "don't cache" that you want is actually "don't store", then no-store is the directive to use.

The Transfer-Encoding:
	 header specifies the form of encoding used to safely transfer the payload body to the user. 
The HTTP message payload body is the information ("payload") part of the data that is sent in the HTTP Message Body (if any), prior to transfer encoding being applied. If transfer encoding is not used, the payload body and message body are the same thing!
For example, in this response the message body contains only the payload body: "Mozilla Developer Network":

HTTP/1.1 200 OK
Content-Type: text/plain

Mozilla Developer Network
The Content-Length header is omitted in this case and at the beginning of each chunk you need to add the length of the current chunk in hexadecimal format, followed by '\r\n' and then the chunk itself, followed by another '\r\n'.

 The Accept-Encoding request HTTP header indicates the content encoding (usually a compression algorithm) that the client can understand.)
====================================================================OTHER INFO======================================================================================================

While the types of cookies are: Transient and persistent cookies

HTTP:
     is called as a stateless protocol because each request is executed independently, without any knowledge of the requests that were executed before it, which means once the transaction ends the connection between the browser and the server is also lost.


COOKIE, SESSION:
Cookies are client-side files on a local computer that hold user information.
Sessions are server-side files that contain user data.

The browser’s cookies have a maximum capacity of 4 KB.
We can keep as much data as we like within a session, however there is a maximum memory restriction of 128 MB that a script may consume at one time.

Because cookies are kept on the local computer, we don’t need to run a function to start them.	

CACHE ,COOKIE:
Cache is employed to store the web site content for the long run purpose.
While cookie is employed to store user choices.

Cache stores the contents like html pages, images, Javascript, CSS etc.
While cookie store the contents like browsing sessions and temporary tracking data.

Cache’s website contents are stored in browser only.
While cookie’s contents are stored in both server and browser.

the types of cache are: Browser cache and proxy cache.	
While the types of cookies are: Transient and persistent cookies.


Custom header and normal header


End-to-end headers:
    These headers must be transmitted to the final recipient of the message: the server for a request, or the client for a response. Intermediate proxies must retransmit these headers unmodified and caches must store them.

Hop-by-hop headers:
    These headers are meaningful only for a single transport-level connection, and must not be retransmitted by proxies or cached. Note that only hop-by-hop headers may be set using the Connection header.

DELTA-SECOND:
	Delta Seconds is the amount of time elapsed since the last Event Tick. (UNREAL ENGINE)

Most actionable response headers are generated by the Web server itself. These include instructions for the client to cache the content (or not), content language, and the HTTTP request status code among others.

The Web Open Font Format (WOFF)

WOFF (the Web Open Font Format) is a web font format developed by Mozilla in concert with Type Supply, LettError, and other organizations. It uses a compressed version of the same table-based sfnt structure used by TrueType, OpenType, and Open Font Format, but adds metadata and private-use data structures, including predefined fields allowing foundries and vendors to provide license information if desired.

How cache & cookies work
Cookies are files created by sites you visit. They make your online experience easier by saving browsing data.
The cache remembers parts of pages, like images, to help them open faster during your next visit.

If a cookie does not contain an expiration date, it is considered a session cookie.
Unlike storing data in the object cache, transient data is stored only temporarily, with the expectation that it is updated periodically. 

The structure of your URL is the web address to your site and its subpages. You have two basic choices when it comes to the selection of URLs: absolute URL and relative URL. 
ABSOLUTE URL:
	An absolute URL contains the entire address from the protocol (HTTPS) to the domain name (www.example.com) and includes the location within your website in your folder system (/foldernameA or /foldernameB) names within the URL.
		<a href = http://www.example.com/xyz.html>
RELATIVE URL:
	The relative URL, on the other hand, does not use the full web address and only contains the location following the domain. It assumes that the link you add is on the same site and is part of the same root domain.
	<a href = "/xyz.html">	
